# freelanceTask6

# –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ —è–∑—ã–∫–µ Python

# –ò–º–µ—è –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞: (x-a)*(x-b)*(x-c)+d=0.
# –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ —è–∑—ã–∫–µ Python, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—è—Ç—å –∫–æ—Ä–Ω–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –®—Ç—É—Ä–º–∞,
# –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –ø–µ—Ä–µ–º–µ–Ω–∞–º–∏ –∑–Ω–∞–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ª–µ–∂–∞—Ç –∫–æ—Ä–Ω–∏.
# –í —É—Å–ª–æ–≤–∏–µ —É–∂–µ –¥–∞–Ω–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä x^3-52x+d.
# –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –º–æ–≥ –≤–≤–µ—Å—Ç–∏ d –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
# –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –±—É–º–∞–≥–µ —É–∂–µ –∏–º–µ–µ—Ç—Å—è, –Ω—É–∂–Ω–æ –ª–∏—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞.
# –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å –º–µ—Ç–æ–¥–æ–º –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
# –∏ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π.
#
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∫–æ–¥—É –∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –≤–∏–¥–µ –±–ª–æ–∫-—Å—Ö–µ–º—ã/–ø–æ –ø—É–Ω–∫—Ç–∞–º.

# pip install sympy

# –†–µ—à–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ (ùë• ‚àí ùëé)(ùë• ‚àí ùëè)(ùë• ‚àí ùëê) + d = 0
# *********************************************************************************************************************
from sympy import *


def coeff_before_x(function):
    # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º 'x' –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏
    fl_sign = 'plus'  # —Ñ–ª–∞–≥ –∑–Ω–∞–∫–∞ —á–∏—Å–ª–∞
    f_string = str(function)
    x_index = f_string.index('x')
    if ' ' in f_string[:x_index]:  # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 'x'
        space_count = f_string.count(' ', 0, x_index)  # —á–∏—Å–ª–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ 'x'
        space_index = 0
        for i in range(space_count):
            space_index = f_string.find(' ', space_index + 1, x_index)  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª - –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º
        if x_index == len(f_string) - 1:  # –µ—Å–ª–∏ 'x' –∫—Ä–∞–π–Ω–∏–π —Å–ø—Ä–∞–≤–∞
            fl_sign = 'plus' if '+' == f_string[space_index - 1] else 'minus'
    else:
        space_index = -1

    if x_index == 0:
        coefficient = 1
    else:
        # –µ—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ 56789 - 98765*x, —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
        coefficient = int(f_string[space_index + 1:x_index - 1]) if fl_sign == 'plus' else -int(
            f_string[space_index + 1:x_index - 1])
    return coefficient


def degree_x(function):
    # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Å—Ç–µ–ø–µ–Ω—å –ø–µ—Ä–≤–æ–≥–æ 'x' –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏
    f_string = str(function)
    if 'x' in f_string:
        x_index = f_string.index('x')
        if x_index == len(f_string) - 1:  # –µ—Å–ª–∏ 'x' –∫—Ä–∞–π–Ω–∏–π —Å–ø—Ä–∞–≤–∞
            degree_x = 1
        else:
            if f_string[x_index + 1] == '*' and f_string[x_index + 2] == '*':
                degree_x = int(f_string[x_index + 3])
            else:
                degree_x = 1
    else:
        degree_x = 0
    return degree_x


def residue_func(func0, func1):
    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–æ–¥—è—â–∞—è –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –æ–¥–Ω–æ–º—É –≤–∏–¥—É –∏ –æ–ø—Ä–µ–¥—è–ª—è—é—â–∞—è –æ—Å—Ç–∞—Ç–æ–∫ –∏—Ö —Ä–∞–∑–Ω–æ—Å—Ç–∏
    f0_reduction = expand(func0 * coeff_before_x(func1))
    f1_reduction = expand(func1 * coeff_before_x(func0) * (x ** (degree_x(func0) - degree_x(func1))))
    func2 = f0_reduction - f1_reduction
    return func2


def calculate_residue(func1, func2):
    # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –Ω—É–∂–Ω–æ –ª–∏ –¥–∞–ª—å—à–µ –≤—ã—á–∏—Å–ª—è—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
    if degree_x(func2) < degree_x(func1):  # –µ—Å–ª–∏ —Å—Ç–µ–ø–µ–Ω—å –æ—Å—Ç–∞—Ç–∫–∞ –º–µ–Ω—å—à–µ —Å—Ç–µ–ø–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –¥–µ–ª—è—Ç
        residue = -func2
    else:
        residue = -residue_func(func2, func1)  # –∏–Ω–∞—á–µ - –µ—â–µ —Ä–∞–∑ –≤—ã—á–∏—Å–ª—è–µ–º
    return residue


# –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –®—Ç—É—Ä–º–∞
# **********************************************************************************************************************

print("–†–µ—à–∞–µ–º –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ (x - a)(x - b)(x - c) + d  = 0")
a, b, c, d = map(int, input("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: a b c d: ").split())
x = Symbol('x')  # –æ–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–µ —á—Ç–æ 'x' —ç—Ç–æ —Å–∏–º–≤–æ–ª, –∞ –Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

f = (x - a) * (x - b) * (x - c) + d  # –∑–∞–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è
f0 = expand(f)  # —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –≤–∏–¥—É f0 = x ** 3 - 52 * x + 96
f1 = diff(f0, x)  # –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä—É–µ–º

f_list = []  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π (—Å–∏—Å—Ç–µ–º–∞ –®—Ç—É—Ä–º–∞)

f_list.append(f0)
f_list.append(f1)

fl = True  # –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∑–∞–Ω–µ—Å–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª –≤ —Å–ø–∏—Å–æ–∫
i = 0
while fl == True:
    f_list.append(calculate_residue(f_list[i + 1], residue_func(f_list[i], f_list[i + 1])))
    if diff(f_list[i + 2], x) == 0:  # –ø–æ–∫–∞ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —á–∏—Å–ª–∞ = 0)
        fl = False  # —Å—Ç–æ–ø —Ü–∏–∫–ª
    i += 1


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –®—Ç—É—Ä–º–∞
# **********************************************************************************************************************

# –û–ø—Ä–µ–¥–µ–ª–∏–º –∑–Ω–∞–∫–∏  –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤ –ø—Ä–∏ –ø–ª—é—Å –∏ –ø—Ä–∏ –º–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å. –í—ã—á–∏—Å–ª—è—Ç—å  –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.
# –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—à–∏—Ö —Å—Ç–µ–ø–µ–Ω—è—Ö –∏ –Ω–∞ —Å–∞–º–∏ —ç—Ç–∏ —Å—Ç–µ–ø–µ–Ω–∏.
# –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ —Å–∏—Å—Ç–µ–º—ã —à—Ç—É—Ä–º–∞ –ø—Ä–∏ –ø–ª—é—Å\–º–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
# –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –Ω–∏–º–∏


def define_sign_infinity(func):
    # —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–µ–¥–µ–ª—è—é—â–∞—è –∑–Ω–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –ø–ª—é—Å/–º–∏–Ω—É—Å-–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
    if degree_x(func) == 0:  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è - —á–∏—Å–ª–æ
        if define_sign_before_number(func) == 'plus':  # –µ—Å–ª–∏ –∑–Ω–∞–∫ –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º '–ø–ª—é—Å'
            sign_plus_inf = '+'
            sign_minus_inf = '-'
        else:
            sign_plus_inf = '-'
            sign_minus_inf = '+'
    else:
        if degree_x(func) % 2 == 0:  # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ç–Ω–∞—è
            sign_plus_inf = '+'  # –∑–Ω–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –ø–ª—é—Å-–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
            sign_minus_inf = '+'  # –∑–Ω–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –º–∏–Ω—É—Å-–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
        else:
            sign_plus_inf = '+'
            sign_minus_inf = '-'
    return sign_plus_inf, sign_minus_inf


def create_shturm_table(lst):
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –®—Ç—É—Ä–º–∞ –ø—Ä–∏ –º–∏–Ω—É—Å\–ø–ª—é—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
    table = []
    for i in range(len(lst)):
        table.append(define_sign_infinity(lst[i]))
    return table


def define_sign_before_number(func):
    # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –∑–Ω–∞–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º
    func = str(func)
    if func[0] == '-':
        fl = 'minus'
    else:
        fl = 'plus'
    return fl


def count_sign_change(lst, index):
    # —Ñ—É–Ω–∫—Ü–∏—è, —Å—á–∏—Ç–∞—é—â–∞—è —á–∏—Å–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –®—Ç—É—Ä–º–∞ (–¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á—á–Ω–æ—Å—Ç–µ–π)
    fl = lst[0][index]  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    count = 0
    for i in range(len(lst)):
        if lst[i][index] != 0:  # –µ—Å–ª–∏ –∑–Ω–∞–∫ = 0, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if lst[i][index] != fl:
                fl = lst[i][index]
                count += 1
    return count


def calculation_func_value(func, x_value):
    # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ 'x_value'
    y = func.subs({x: x_value})
    return y


def define_sign_func_value(func_value):
    # —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –∑–Ω–∞–∫ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    if func_value < 0:
        fl = 'minus'
    elif func_value > 0:
        fl = 'plus'
    else:
        fl = 0
    return fl


def count_sign_func_change(lst):
    # —Ñ—É–Ω–∫—Ü–∏—è, —Å—á–∏—Ç–∞—é—â–∞—è —á–∏—Å–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –®—Ç—É—Ä–º–∞ (–¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π)
    fl = lst[0]  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    count = 0
    for i in range(len(lst)):
        if lst[i] != 0:  # –µ—Å–ª–∏ –∑–Ω–∞–∫ = 0, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if lst[i] != fl:
                fl = lst[i]
                count += 1
    return count


def create_sign_list(lst, arg_x):
    # —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã—á–∏—Å–ª—è—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ 'x' –∏ —Å–æ–∑–¥–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤(+\-)
    sign_list = []  # —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏
    for i in range(len(lst)):
        sign_list.append(define_sign_func_value(calculation_func_value(lst[i], arg_x)))
    return sign_list


# –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ —Å–∏—Å—Ç–µ–º—ã —à—Ç—É—Ä–º–∞ –ø—Ä–∏ –ø–ª—é—Å\–º–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
# –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –Ω–∏–º–∏
inf_table = create_shturm_table(f_list)  # —Ç–∞–±–ª–∏—Ü–∞ –®—Ç—É—Ä–º–∞ –¥–ª—è –ø–ª—é—Å\–º–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
valid_roots = abs(count_sign_change(inf_table, 0) - count_sign_change(inf_table, 1))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π

# –æ–ø—Ä–µ–¥–µ–ª–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∫–æ—Ä–Ω–∏.
# –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ —Å–∏—Å—Ç–µ–º—ã –®—Ç—É—Ä–º–∞ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 'x'.
# –ò—Å–∫–æ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç '0' –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —á–∏—Å–ª–∞, —Ä–∞–≤–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∫—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π.
# !!! —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!!!
max_root_list = []  # —Å–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞ —Å–∏—Å—Ç–µ–º—ã –®—Ç—É—Ä–º–∞ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 'x'.
max_root_list.append(count_sign_func_change(create_sign_list(f_list, -12)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, -9)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, -6)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, -3)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 0)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 3)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 6)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 9)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 12)))  # x = 0
max_root_list.append(count_sign_func_change(create_sign_list(f_list, 15)))  # x = 0
print(f_list[0].subs({x: -9}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
print(f_list[0].subs({x: -6}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
print(f_list[0].subs({x: 0}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
print(f_list[0].subs({x: 3}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
print(f_list[0].subs({x: 6}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
print(f_list[0].subs({x: 9}))  # –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
x_arg = 1  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö
# while (0 not in max_root_list):
# –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —à—Ç—É—Ä–º–∞: '0' –∏ '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π'
#    print(max_root_list)
#    max_root_list.append(count_sign_func_change(create_sign_list(f_list, x_arg)))
#    max_root_list.append(count_sign_func_change(create_sign_list(f_list, -x_arg)))
#    x_arg += 1
# print(0 not in max_root_list)
print(max_root_list)

print(calculation_func_value(f_list[3], 0))
print(define_sign_func_value(calculation_func_value(f_list[3], 0)))
print(f_list)
print(inf_table)
print(valid_roots)

# print(f_list[0].subs({x: 0}))  –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å x=0
